/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-01")
public class NodeDAO implements org.apache.thrift.TBase<NodeDAO, NodeDAO._Fields>, java.io.Serializable, Cloneable, Comparable<NodeDAO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeDAO");

  private static final org.apache.thrift.protocol.TField NODE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeIP", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePort", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeDAOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeDAOTupleSchemeFactory());
  }

  public String nodeIP; // required
  public int nodePort; // required
  public int nodeId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_IP((short)1, "nodeIP"),
    NODE_PORT((short)2, "nodePort"),
    NODE_ID((short)3, "nodeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_IP
          return NODE_IP;
        case 2: // NODE_PORT
          return NODE_PORT;
        case 3: // NODE_ID
          return NODE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEPORT_ISSET_ID = 0;
  private static final int __NODEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_IP, new org.apache.thrift.meta_data.FieldMetaData("nodeIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_PORT, new org.apache.thrift.meta_data.FieldMetaData("nodePort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeDAO.class, metaDataMap);
  }

  public NodeDAO() {
  }

  public NodeDAO(
    String nodeIP,
    int nodePort,
    int nodeId)
  {
    this();
    this.nodeIP = nodeIP;
    this.nodePort = nodePort;
    setNodePortIsSet(true);
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeDAO(NodeDAO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNodeIP()) {
      this.nodeIP = other.nodeIP;
    }
    this.nodePort = other.nodePort;
    this.nodeId = other.nodeId;
  }

  public NodeDAO deepCopy() {
    return new NodeDAO(this);
  }

  @Override
  public void clear() {
    this.nodeIP = null;
    setNodePortIsSet(false);
    this.nodePort = 0;
    setNodeIdIsSet(false);
    this.nodeId = 0;
  }

  public String getNodeIP() {
    return this.nodeIP;
  }

  public NodeDAO setNodeIP(String nodeIP) {
    this.nodeIP = nodeIP;
    return this;
  }

  public void unsetNodeIP() {
    this.nodeIP = null;
  }

  /** Returns true if field nodeIP is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeIP() {
    return this.nodeIP != null;
  }

  public void setNodeIPIsSet(boolean value) {
    if (!value) {
      this.nodeIP = null;
    }
  }

  public int getNodePort() {
    return this.nodePort;
  }

  public NodeDAO setNodePort(int nodePort) {
    this.nodePort = nodePort;
    setNodePortIsSet(true);
    return this;
  }

  public void unsetNodePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEPORT_ISSET_ID);
  }

  /** Returns true if field nodePort is set (has been assigned a value) and false otherwise */
  public boolean isSetNodePort() {
    return EncodingUtils.testBit(__isset_bitfield, __NODEPORT_ISSET_ID);
  }

  public void setNodePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEPORT_ISSET_ID, value);
  }

  public int getNodeId() {
    return this.nodeId;
  }

  public NodeDAO setNodeId(int nodeId) {
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    return this;
  }

  public void unsetNodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  public void setNodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_IP:
      if (value == null) {
        unsetNodeIP();
      } else {
        setNodeIP((String)value);
      }
      break;

    case NODE_PORT:
      if (value == null) {
        unsetNodePort();
      } else {
        setNodePort((Integer)value);
      }
      break;

    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_IP:
      return getNodeIP();

    case NODE_PORT:
      return getNodePort();

    case NODE_ID:
      return getNodeId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_IP:
      return isSetNodeIP();
    case NODE_PORT:
      return isSetNodePort();
    case NODE_ID:
      return isSetNodeId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeDAO)
      return this.equals((NodeDAO)that);
    return false;
  }

  public boolean equals(NodeDAO that) {
    if (that == null)
      return false;

    boolean this_present_nodeIP = true && this.isSetNodeIP();
    boolean that_present_nodeIP = true && that.isSetNodeIP();
    if (this_present_nodeIP || that_present_nodeIP) {
      if (!(this_present_nodeIP && that_present_nodeIP))
        return false;
      if (!this.nodeIP.equals(that.nodeIP))
        return false;
    }

    boolean this_present_nodePort = true;
    boolean that_present_nodePort = true;
    if (this_present_nodePort || that_present_nodePort) {
      if (!(this_present_nodePort && that_present_nodePort))
        return false;
      if (this.nodePort != that.nodePort)
        return false;
    }

    boolean this_present_nodeId = true;
    boolean that_present_nodeId = true;
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (this.nodeId != that.nodeId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_nodeIP = true && (isSetNodeIP());
    list.add(present_nodeIP);
    if (present_nodeIP)
      list.add(nodeIP);

    boolean present_nodePort = true;
    list.add(present_nodePort);
    if (present_nodePort)
      list.add(nodePort);

    boolean present_nodeId = true;
    list.add(present_nodeId);
    if (present_nodeId)
      list.add(nodeId);

    return list.hashCode();
  }

  @Override
  public int compareTo(NodeDAO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNodeIP()).compareTo(other.isSetNodeIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeIP, other.nodeIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodePort()).compareTo(other.isSetNodePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePort, other.nodePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeDAO(");
    boolean first = true;

    sb.append("nodeIP:");
    if (this.nodeIP == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodePort:");
    sb.append(this.nodePort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeId:");
    sb.append(this.nodeId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeDAOStandardSchemeFactory implements SchemeFactory {
    public NodeDAOStandardScheme getScheme() {
      return new NodeDAOStandardScheme();
    }
  }

  private static class NodeDAOStandardScheme extends StandardScheme<NodeDAO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeDAO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeIP = iprot.readString();
              struct.setNodeIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodePort = iprot.readI32();
              struct.setNodePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeId = iprot.readI32();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeDAO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeIP != null) {
        oprot.writeFieldBegin(NODE_IP_FIELD_DESC);
        oprot.writeString(struct.nodeIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NODE_PORT_FIELD_DESC);
      oprot.writeI32(struct.nodePort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.nodeId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeDAOTupleSchemeFactory implements SchemeFactory {
    public NodeDAOTupleScheme getScheme() {
      return new NodeDAOTupleScheme();
    }
  }

  private static class NodeDAOTupleScheme extends TupleScheme<NodeDAO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeDAO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNodeIP()) {
        optionals.set(0);
      }
      if (struct.isSetNodePort()) {
        optionals.set(1);
      }
      if (struct.isSetNodeId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNodeIP()) {
        oprot.writeString(struct.nodeIP);
      }
      if (struct.isSetNodePort()) {
        oprot.writeI32(struct.nodePort);
      }
      if (struct.isSetNodeId()) {
        oprot.writeI32(struct.nodeId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeDAO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.nodeIP = iprot.readString();
        struct.setNodeIPIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nodePort = iprot.readI32();
        struct.setNodePortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nodeId = iprot.readI32();
        struct.setNodeIdIsSet(true);
      }
    }
  }

}

